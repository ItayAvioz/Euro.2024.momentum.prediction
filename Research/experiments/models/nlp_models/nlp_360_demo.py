#!/usr/bin/env python3
"""
Detailed NLP and 360¬∞ Data Processing Demonstration
Shows actual methods used in the soccer analytics project
"""

import pandas as pd
import numpy as np

def demonstrate_nlp_and_360_processing():
    """Complete demonstration of NLP and 360¬∞ processing methods"""
    
    print("üìä DETAILED NLP AND 360¬∞ DATA PROCESSING EXPLANATION")
    print("=" * 70)
    print("Step-by-step breakdown of actual methods used")
    print("=" * 70)
    
    # STEP 1: Language Processing Setup
    print("\nüîß STEP 1: LANGUAGE MODEL SETUP")
    print("=" * 50)
    
    # Domain-specific vocabulary (NOT advanced LLMs)
    event_descriptions = {
        'Pass': {
            'successful': 'completes a pass',
            'failed': 'loses possession with failed pass',
            'progressive': 'plays a progressive pass forward'
        },
        'Shot': {
            'on_target': 'forces a save from the goalkeeper',
            'goal': 'finds the back of the net',
            'off_target': 'sends the shot wide'
        },
        'Carry': {
            'progressive': 'drives forward with the ball',
            'under_pressure': 'dribbles under pressure'
        }
    }
    
    momentum_descriptors = {
        'low': ['struggling', 'under pressure', 'defending desperately'],
        'high': ['building momentum', 'taking control', 'pressing forward'],
        'very_high': ['dominating', 'in complete control', 'overwhelming']
    }
    
    print("‚úÖ Domain-specific vocabulary loaded")
    print(f"   - {len(event_descriptions)} event types with descriptions")
    print(f"   - {len(momentum_descriptors)} momentum levels with descriptors")
    print("   - Rule-based text processing (NOT advanced LLMs)")
    print("   - Soccer-specific terminology and patterns")
    
    # STEP 2: 360¬∞ Data Processing
    print("\nüåê STEP 2: 360¬∞ SPATIAL DATA PROCESSING")
    print("=" * 50)
    
    print("üìä INPUT: 360¬∞ Data Structure")
    print("Raw 360¬∞ data format:")
    print("- event_uuid: Links to main event")
    print("- freeze_frame: Array of player positions [x, y]")
    print("- visible_area: Field visibility polygon")
    print("- teammate: Boolean indicating team membership")
    
    # Sample freeze frame data (realistic format)
    freeze_frame_example = [
        {'location': [60.2, 40.1], 'player': {'name': 'Van Dijk'}, 'teammate': True},
        {'location': [58.5, 35.8], 'player': {'name': 'Kane'}, 'teammate': False},
        {'location': [65.3, 42.7], 'player': {'name': 'Bellingham'}, 'teammate': False}
    ]
    
    print("\nüîç STEP 2A: FREEZE FRAME PARSING")
    print("Example freeze frame data:")
    for player in freeze_frame_example:
        team_status = "Teammate" if player["teammate"] else "Opponent"
        print(f"  {player['player']['name']} ({team_status}): {player['location']}")
    
    print("\nüìê STEP 2B: SPATIAL CALCULATIONS")
    
    def calculate_pressure_score(player_pos, opponent_positions):
        """Calculate pressure based on nearby opponents"""
        pressure = 0
        for opp_pos in opponent_positions:
            distance = np.sqrt((player_pos[0] - opp_pos[0])**2 + (player_pos[1] - opp_pos[1])**2)
            if distance < 5:  # Within 5 meters
                pressure += max(0, 5 - distance)  # Closer = more pressure
        return pressure
    
    # Extract positions and calculate pressure
    player_pos = freeze_frame_example[0]["location"]  # Van Dijk
    opponent_positions = [p["location"] for p in freeze_frame_example if not p["teammate"]]
    pressure_score = calculate_pressure_score(player_pos, opponent_positions)
    
    print(f"Van Dijk position: {player_pos}")
    print(f"Opponent positions: {opponent_positions}")
    print(f"Calculated pressure score: {pressure_score:.2f}")
    
    print("\nüó∫Ô∏è STEP 2C: FIELD ZONE ANALYSIS")
    
    def determine_field_zone(x_coord, y_coord):
        """Determine which zone of the field the action occurs in"""
        # Field is 120m x 80m
        if x_coord < 40:
            zone = "Defensive Third"
        elif x_coord < 80:
            zone = "Midfield"
        else:
            zone = "Attacking Third"
        
        if y_coord < 18 or y_coord > 62:
            zone += " (Wide)"
        else:
            zone += " (Central)"
        
        return zone
    
    for player in freeze_frame_example:
        zone = determine_field_zone(player["location"][0], player["location"][1])
        print(f"  {player['player']['name']}: {zone}")
    
    # STEP 3: Event Text Processing
    print("\nüìù STEP 3: EVENT TEXT PROCESSING")
    print("=" * 50)
    
    # Sample event data
    events_data = [
        {
            'minute': 23, 'second': 15, 'event_type': 'Pass',
            'player_name': 'Harry Kane', 'team_name': 'England',
            'outcome': 'successful', 'location': [75.2, 40.1]
        },
        {
            'minute': 23, 'second': 18, 'event_type': 'Shot',
            'player_name': 'Harry Kane', 'team_name': 'England',
            'outcome': 'on_target', 'location': [110.5, 38.2]
        }
    ]
    
    print("üìä INPUT: Event Data Structure")
    print("Raw event data contains:")
    print("- Temporal: minute, second")
    print("- Spatial: x, y coordinates")
    print("- Contextual: player, team, outcome")
    print("- Semantic: event_type, result")
    
    print("\nüßπ STEP 3A: TEXT EXTRACTION & CLEANING")
    
    def extract_event_text(event):
        """Extract meaningful text from event data"""
        base_text = f"{event['player_name']} ({event['team_name']})"
        
        # Add event description using domain vocabulary
        if event['event_type'] in event_descriptions:
            event_desc = event_descriptions[event['event_type']]
            if event['outcome'] in event_desc:
                action = event_desc[event['outcome']]
            else:
                action = 'performs action'
        else:
            action = event['event_type'].lower()
        
        # Add location context
        zone = determine_field_zone(event['location'][0], event['location'][1])
        
        return f"{base_text} {action} in the {zone}"
    
    print("Extracted event text:")
    for event in events_data:
        event_text = extract_event_text(event)
        print(f"  {event_text}")
    
    print("\nüîç STEP 3B: SENTIMENT ANALYSIS")
    
    # Rule-based sentiment scoring (NOT advanced ML models)
    sentiment_scores = {
        'Pass': {'successful': 0.2, 'failed': -0.3},
        'Shot': {'on_target': 0.8, 'goal': 1.0, 'off_target': -0.1},
        'Pressure': {'successful': 0.3, 'failed': -0.2},
        'Dribble': {'successful': 0.4, 'failed': -0.2}
    }
    
    print("Rule-based sentiment analysis:")
    for event in events_data:
        event_type = event['event_type']
        outcome = event['outcome']
        
        if event_type in sentiment_scores and outcome in sentiment_scores[event_type]:
            score = sentiment_scores[event_type][outcome]
            print(f"  {event['player_name']} {event_type} ({outcome}): {score:+.1f}")
    
    # STEP 4: Commentary Generation
    print("\nüéôÔ∏è STEP 4: COMMENTARY GENERATION")
    print("=" * 50)
    
    print("üî§ STEP 4A: TEMPLATE-BASED GENERATION")
    
    # Templates for different commentary types
    commentary_templates = {
        'momentum_shift': "{team} {momentum_descriptor} with {key_stats}",
        'action_sequence': "{player} {action} and {result}",
        'tactical_analysis': "{team} {tactical_approach} in the {field_zone}"
    }
    
    def select_momentum_descriptor(momentum_score):
        """Select appropriate descriptor based on momentum score"""
        if momentum_score < 4:
            return np.random.choice(momentum_descriptors['low'])
        elif momentum_score < 8:
            return 'building momentum'
        else:
            return np.random.choice(momentum_descriptors['very_high'])
    
    # Generate template-based commentary
    momentum_score = 7.2
    descriptor = select_momentum_descriptor(momentum_score)
    commentary = commentary_templates['momentum_shift'].format(
        team="England",
        momentum_descriptor=descriptor,
        key_stats=f"momentum at {momentum_score:.1f}/10"
    )
    
    print(f"Generated commentary: \"{commentary}\"")
    
    print("\nüß† STEP 4B: CONTEXT-AWARE GENERATION")
    
    def generate_contextual_commentary(events):
        """Generate commentary based on recent event context"""
        recent_events = events[-2:]  # Last 2 events
        event_types = [e['event_type'] for e in recent_events]
        teams = [e['team_name'] for e in recent_events]
        
        # Pattern detection
        if event_types.count('Shot') >= 1:
            pattern = 'shooting_opportunities'
        elif event_types.count('Pass') >= 1:
            pattern = 'possession_play'
        else:
            pattern = 'mixed_play'
        
        # Context-specific templates
        context_templates = {
            'shooting_opportunities': 'Plenty of shooting opportunities here for {team}',
            'possession_play': '{team} patiently building their attacks',
            'mixed_play': 'End-to-end action in this phase'
        }
        
        dominant_team = teams[0] if teams else 'England'
        return context_templates[pattern].format(team=dominant_team)
    
    contextual_commentary = generate_contextual_commentary(events_data)
    print(f"Contextual commentary: \"{contextual_commentary}\"")
    
    print("\nüìà STEP 4C: MOMENTUM-BASED NARRATIVE")
    
    def create_momentum_narrative(current_momentum, future_momentum, team):
        """Create narrative based on momentum trend"""
        momentum_change = future_momentum - current_momentum
        
        if momentum_change > 0.5:
            narrative = f"{team} are really building momentum now"
        elif momentum_change < -0.5:
            narrative = f"{team} seem to be losing their grip on this game"
        else:
            narrative = f"{team} maintaining their current level"
        
        detailed_narrative = f"{narrative}. Current momentum sits at {current_momentum:.1f}/10, and our model predicts this will increase to {future_momentum:.1f}/10 in the next three minutes."
        
        return detailed_narrative
    
    momentum_narrative = create_momentum_narrative(6.8, 7.2, "Netherlands")
    print(f"Momentum narrative: {momentum_narrative}")
    
    # STEP 5: Actual NLP Techniques Used
    print("\nü§ñ STEP 5: ACTUAL NLP TECHNIQUES USED")
    print("=" * 50)
    
    print("‚úÖ TECHNIQUES IMPLEMENTED:")
    implemented_techniques = [
        "Domain-Specific Vocabulary (Soccer terminology)",
        "Template-Based Generation (String formatting)",
        "Context-Aware Processing (Pattern detection)",
        "Rule-Based Sentiment Analysis (Event scoring)",
        "Temporal Language Processing (Trend narratives)",
        "Spatial Text Integration (Zone descriptions)"
    ]
    
    for technique in implemented_techniques:
        print(f"  ‚úÖ {technique}")
    
    print("\n‚ùå TECHNIQUES NOT IMPLEMENTED:")
    not_implemented = [
        "Large Language Models (GPT, BERT)",
        "Deep Learning Text Generation",
        "Named Entity Recognition",
        "Advanced Sentiment Analysis Models",
        "Word Embeddings (Word2Vec, GloVe)",
        "Transformer Models"
    ]
    
    for technique in not_implemented:
        print(f"  ‚ùå {technique}")
    
    print("\nüí° RATIONALE FOR APPROACH:")
    print("The project focused on:")
    print("1. Rule-based NLP for reliability and control")
    print("2. Domain-specific vocabulary for accuracy")
    print("3. Template-based generation for consistency")
    print("4. Context-aware processing for relevance")
    print("5. Integration with momentum prediction models")
    
    # STEP 6: Complete Processing Pipeline
    print("\nüîÑ COMPLETE PROCESSING PIPELINE")
    print("=" * 50)
    
    pipeline_steps = [
        "1. Raw Data Input (StatsBomb Events + 360¬∞ Data)",
        "2. Spatial Analysis (Player positions ‚Üí Pressure, Zones)",
        "3. Event Text Processing (Events ‚Üí Descriptions, Context)",
        "4. Sentiment Analysis (Outcomes ‚Üí Momentum scores)",
        "5. Feature Engineering (Temporal, Spatial, Contextual)",
        "6. Model Prediction (Current + Future Momentum)",
        "7. Commentary Generation (Templates + Context)",
        "8. Output Integration (Predictions + Commentary)"
    ]
    
    for step in pipeline_steps:
        print(f"  {step}")
    
    print("\nüìä DATA FLOW:")
    print("StatsBomb Data ‚Üí Event Parser ‚Üí Spatial Analyzer ‚Üí")
    print("Text Processor ‚Üí Sentiment Analyzer ‚Üí Feature Engineer ‚Üí")
    print("ML Model ‚Üí Commentary Generator ‚Üí Final Output")
    
    print("\nüéØ KEY INSIGHTS SUMMARY")
    print("=" * 50)
    print("1. SPATIAL PROCESSING: 360¬∞ data used for pressure/zone analysis")
    print("2. TEXT PROCESSING: Rule-based, not advanced NLP models")
    print("3. COMMENTARY: Template-based with context awareness")
    print("4. INTEGRATION: NLP combined with momentum prediction models")
    print("5. DOMAIN FOCUS: Soccer-specific vocabulary and patterns")
    print("6. PRACTICAL APPROACH: Reliable, controllable, domain-specific")

if __name__ == "__main__":
    demonstrate_nlp_and_360_processing() 